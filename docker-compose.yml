version: '3.8'

services:
  mysql:
    image: mysql:8.0.36-debian
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: myapp
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - ~/docker-services/data/mysql:/var/lib/mysql
      - ./services/mysql/config:/etc/mysql/conf.d
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: myapp
    ports:
      - "27017:27017"
    volumes:
      - ~/docker-services/data/mongodb:/data/db
      - ./services/mongodb/config:/etc/mongo
    networks:
      - app-network

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - ~/docker-services/data/postgres:/var/lib/postgresql/data
      - ./services/postgres/config:/etc/postgresql
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ~/docker-services/data/redis:/data
      - ./services/redis/config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - app-network

  minio:
    image: quay.io/minio/minio
    container_name: minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ~/docker-services/data/minio:/data
      - ./services/minio/config:/etc/minio
    command: server /data --console-address ":9001"
    networks:
      - app-network

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:latest
    container_name: redpanda
    restart: unless-stopped
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:9223
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:9223
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:8083
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:8083
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:8084
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      - --smp 1
      - --memory 1G
      - --mode dev-container
      - --default-log-level=info
    ports:
      - "9223:9223"
      - "9092:9092"
      - "8083:8083"
      - "8084:8084"
      - "9644:9644"
    volumes:
      - ~/docker-services/data/redpanda:/var/lib/redpanda/data
    environment:
      - REDPANDA_ENVIRONMENT=development
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster info"]
      interval: 30s
      timeout: 10s
      retries: 5

  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: redpanda-console
    restart: unless-stopped
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: false
    ports:
      - "8080:8080"
    depends_on:
      redpanda:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge